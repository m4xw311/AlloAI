name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  id-token: write # Required for OIDC trusted publishing

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov flake8 black mypy

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 alloai --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 alloai --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check formatting with black
        run: |
          black --check alloai/ || true  # Don't fail on formatting issues

      - name: Type check with mypy
        run: |
          mypy alloai/ --ignore-missing-imports || true  # Don't fail on type issues

      - name: Test with pytest
        run: |
          # Run tests if they exist, otherwise just import the package
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=alloai --cov-report=xml --cov-report=term
          else
            python -c "import alloai; print(f'AlloAI version: {alloai.__version__}')"
          fi
        shell: bash

      - name: Test CLI
        run: |
          # Test that the CLI is properly installed and works
          pip install -e .
          alloai --version
          alloai --help

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: List distribution files
        run: ls -la dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    # Only publish to TestPyPI on pushes to main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/alloai
    permissions:
      id-token: write # OIDC trusted publishing

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true # Don't fail if version already exists

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    # Only publish to PyPI on tagged releases
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/alloai
    permissions:
      id-token: write # OIDC trusted publishing
      contents: write # For creating GitHub releases

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No authentication needed - uses OIDC

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          generateReleaseNotes: true
          body: |
            ## AlloAI v${{ steps.get_version.outputs.VERSION }}

            ### Installation
            ```bash
            pip install alloai==${{ steps.get_version.outputs.VERSION }}
            ```

            ### What's Changed
            See the full changelog below.

            ### PyPI
            https://pypi.org/project/alloai/${{ steps.get_version.outputs.VERSION }}/

  test-published-package:
    name: Test Published Package
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Wait for PyPI to update
        run: sleep 60 # Wait 1 minute for PyPI to propagate

      - name: Install published package
        run: |
          python -m pip install --upgrade pip
          pip install alloai

      - name: Test installed package
        run: |
          alloai --version
          alloai --help
          # Test with example if .env is not required
          echo '```python
          x = 5
          print(f"x = {x}")
          ```' > test_script.md
          # Run without OpenAI key to at least test parsing
          alloai test_script.md || true

      - name: Verify package metadata
        run: |
          pip show alloai
          python -c "import alloai; print(f'Installed version: {alloai.__version__}')"

  notify:
    name: Notify on Release
    runs-on: ubuntu-latest
    needs: [publish-pypi, create-release]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Extract version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "ðŸŽ‰ AlloAI v${{ steps.get_version.outputs.VERSION }} has been successfully published!"
          echo "PyPI: https://pypi.org/project/alloai/${{ steps.get_version.outputs.VERSION }}/"
          echo "GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}"
